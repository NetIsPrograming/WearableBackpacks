plugins {
    id "fabric-loom" version "1.5-SNAPSHOT"
    id "net.nemerosa.versioning" version "3.0.0"
    id "org.gradle.signing"
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    accessWidenerPath = file("src/main/resources/wearablebackpacks.accesswidener")

    /*mixin {
      defaultRefmapName.set("mixins/wearablebackpacks/refmap.json")
    }

    runs {
      configureEach {
        property "mixin.debug", "true"
        property "mixin.debug.export.decompile", "false"
        property "mixin.debug.verbose", "true"
        property "mixin.dumpTargetOnFailure", "true"
        property "mixin.checks", "true"
        property "mixin.hotSwap", "true"
      }
    }*/

    splitEnvironmentSourceSets()

    mods {
        "wearablebackpacks" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    maven {
        url = "https://maven.terraformersmc.com"
        content {
            includeGroup "com.terraformersmc"
        }
    }
}

dependencies {
    //  minecraft "com.mojang:minecraft:1.16.5"
    //  mappings "net.fabricmc:yarn:1.16.5+build.10:v2"
    //  modImplementation "net.fabricmc:fabric-loader:0.14.8"
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "org.jetbrains:annotations:23.0.0"
    implementation 'org.checkerframework:checker-qual:3.22.1'
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

/*compileJava {
    options.with {
        it.deprecation = true
        it.encoding = "UTF-8"
        it.fork = true
        it.compilerArgs.addAll(
                ["-Xlint:all", "-Xlint:-processing",
                 // Enable parameter name class metadata
                 // https://openjdk.java.net/jeps/118
                 "-parameters"]
        )
        it.release.set(8)
    }
}*/

processResources {
    filesMatching("/fabric.mod.json") {
        expand version: version
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

def antSignJar(task) {
    for (final file in task.outputs.files) {
        ant.signjar(
                jar: file,
                alias: property("signing.mods.keyalias"),
                storepass: property("signing.mods.password"),
                keystore: property("signing.mods.keystore"),
                verbose: true,
                preservelastmodified: true
        )
    }
}

if (hasProperty "signing.mods.keyalias") {
    task signJar(type: Sign) {
        dependsOn remapJar

        doFirst {
            antSignJar remapJar
        }

        sign remapJar
    }

    task signSourcesJar(type: Sign) {
        dependsOn remapSourcesJar

        doFirst {
            antSignJar remapSourcesJar
        }

        sign remapSourcesJar
    }

    assemble {
        dependsOn(signJar, signSourcesJar)
    }
}
